h1. laut.fm Javascript API Tools

Javascript-Bibliothek zur Benutzung der "laut.fm API":http://api.laut.fm.

Achtung: Beta-Software. Bei Problemen bitte "Issue öffnen":https://github.com/lautde/lautfm_js_tools/issues oder im "laut.fm Forum melden":http://forum.laut.fm/.


h2. Features

* Sämtliche API-Call gehen über CORS ("Cross Origin Resource Sharing":http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing). Die Unterschiede zwischen den Internet-Explorern und modernen Browsern gleichen die laut.fm API Tools aus.
* Uhrzeiten werden in Javascript Time-Objekte konvertiert.
* Einzel-Stations-Infos und Song-Infos können automatisch wiederholt abgerufen werden.
* Uhrzeit-Unterschiede zwischen Server und Client werden erkannt und die nötigen Offsets automatisch eingerechnet.
* Keine weiteren Abhängigkeiten


h2. Convenience

* Der Array-Prototyp wird mit @forEach()@ erweitert. (siehe "tutorialspoint.com":http://www.tutorialspoint.com/javascript/array_foreach.htm).
* Zeiten haben @humanTimeShort()@ und @humanTimeLong()@ für Uhrzeiten ala "12:34" und "12:34:56".

h2. Über den Javascript-Wrapper bereitgestellt API-Resourcen

@CALLBACK_OR_OPTIONS@ ist die Funktion, mit der jeweils die Antwort verarbeitet werden soll.

Ab Version 0.3.0: Experimentell kann @CALLBACK_OR_OPTIONS@ auch ein Options-Hash sein:

<pre><code>{container:CONTAINER, template:TEMPLATE, callback:CALLBACK}
</code></pre>

@CONTAINER@ und @TEMPLATE@ können Dom-Elemente oder HTML IDs sein. @TEMPLATE@ kann auch ein String als Template sein. Ein @CALLBACK@ ist dann optional.

Eine komplette Einbindung des gerade laufenden Songs per Template inklusive Autoupdate sieht dann z.B. so aus:

<pre><code><div id="song"></div>

<script type="text/html" id="song_template" charset="utf-8">
  <%= this.title %> - <%= this.artist.name %> (<%= this.started_at.humanTimeLong() %> - <%= this.ends_at.humanTimeLong() %>)
</script>

<script type="text/javascript" charset="utf-8">
  laut.fm.station('maxeinsdreissig').current_song({container:'song', template:'song_template'}, true);
</script>
</code></pre>

Im Template gibt es zwei Tags: @<%= ... %>@ (für Ausgabe) und @<% ... %>@ für stille Auswertung. Ein Template für die letzen gespielten Songs sieht also z.B. so aus:

<pre><code><script type="text/html" id="songs_template" charset="utf-8">
  <% this.forEach(function(song){ %>
    <li><%= song.started_at.humanTimeLong() %> <%= song.title %> - <%= song.artist.name %></li>
  <% }); %>
</script>
</code></pre>

h3. Allgmeine Resourcen

<pre><code>laut.fm.server_status(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/server_status.html ("API URL":http://api.laut.fm/server_status)

<pre><code>laut.fm.letters(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/letters.html ("API URL":http://api.laut.fm/letters)

<pre><code>laut.fm.genres(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/genres.html ("API URL":http://api.laut.fm/genres)

<pre><code>laut.fm.station_names(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station_names.html ("API URL":http://api.laut.fm/station_names)

<pre><code>laut.fm.listeners(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/listeners.html ("API URL":http://api.laut.fm/listeners)


h3. Stations-Auflistungen

Alle Stations-Auflistungen funktionieren mit Optionen zur Paginierung:

@OPTIONS@: @limit@ und/oder @offset@

<pre><code>laut.fm.stations.all(CALLBACK_OR_OPTIONS[, OPTIONS])</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/stations.all.html ("API URL":http://api.laut.fm/stations)
* "Demo mit limit":http://lautde.github.com/lautfm_js_tools/stations.all_limit10.html ("API URL":http://api.laut.fm/stations?limit=10)
* "Demo mit limit und offset":http://lautde.github.com/lautfm_js_tools/stations.all_limit10_offset25.html ("API URL":http://api.laut.fm/stations?limit=10&offset=25)

<pre><code>laut.fm.stations.letter(LETTER, CALLBACK_OR_OPTIONS[, OPTIONS])</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/stations.letter_b.html ("API URL":http://api.laut.fm/stations/letter/b)
* "Demo mit limit":http://lautde.github.com/lautfm_js_tools/stations.letter_b_limit10.html ("API URL":http://api.laut.fm/stations/letter/b?limit=10)
* "Demo mit limit und offset":http://lautde.github.com/lautfm_js_tools/stations.letter_b_limit10_offset5.html ("API URL":http://api.laut.fm/stations/letter/b?limit=10&offset=5)
* "Demo mit Zahl":http://lautde.github.com/lautfm_js_tools/stations.letter_hash.html ("API URL":http://api.laut.fm/stations/numbers)

<pre><code>laut.fm.stations.numbers(CALLBACK_OR_OPTIONS[, OPTIONS])</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/stations.numbers.html ("API URL":http://api.laut.fm/stations/numbers)

<pre><code>laut.fm.stations.genre(GENRE, CALLBACK_OR_OPTIONS[, OPTIONS])</code></pre>

@GENRE@ muss eins der Genres von @laut.fm.genres()@ sein.

* "Demo":http://lautde.github.com/lautfm_js_tools/stations.genre_ROCK.html ("API URL":http://api.laut.fm/stations/genre/Rock)
* "Demo mit limit":http://lautde.github.com/lautfm_js_tools/stations.genre_ROCK_limit10.html ("API URL":http://api.laut.fm/stations/genre/Rock?limit=10)
* "Demo mit limit und offset":http://lautde.github.com/lautfm_js_tools/stations.genre_ROCK_limit10_offset25.html ("API URL":http://api.laut.fm/stations/genre/Rock?limit=10&offset=25)

<pre><code>laut.fm.stations.names(NAMES, CALLBACK_OR_OPTIONS)</code></pre>

@NAMES@ müssen Sendernamen sein, als String Komma-separiert oder als Array.

* "Demo":http://lautde.github.com/lautfm_js_tools/stations.names.html ("API URL":http://api.laut.fm/stations/eins,deepgroove,best_of_80s)


h3. Einzel-Stations-Infos

<pre><code>laut.fm.station('NAME').info(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.info.html ("API URL":http://api.laut.fm/station/eins)

<pre><code>laut.fm.station(NAME).current_song(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.current_song.html ("API URL":http://api.laut.fm/station/eins/current_song)
* "Demo Template Support und Autoupdate":http://lautde.github.com/lautfm_js_tools/station.current_song_template_auto.html

<pre><code>laut.fm.station(NAME).last_songs(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.last_songs.html ("API URL":http://api.laut.fm/station/eins/last_songs)
* "Demo Template Support und Autoupdate":http://lautde.github.com/lautfm_js_tools/station.last_songs_template_auto.html

<pre><code>laut.fm.station(NAME).next_artists(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.next_artists.html ("API URL":http://api.laut.fm/station/eins/next_artists)
* "Demo mit Autoupdate":http://lautde.github.com/lautfm_js_tools/station.next_artists_auto.html

<pre><code>laut.fm.station(NAME).playlists(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.playlists.html ("API URL":http://api.laut.fm/station/disco/playlists)

<pre><code>laut.fm.station(NAME).schedule(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.schedule.html ("API URL":http://api.laut.fm/station/disco/schedule)

<pre><code>laut.fm.station(NAME).listeners(CALLBACK_OR_OPTIONS)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.listeners.html ("API URL":http://api.laut.fm/station/best_of_80s/listeners)


h3. Einzel-Stations-Infos mit Auto-Update

Wird den Funktionen @info@, @current_song@, @last_songs@ oder @next_artists@ als zweiter parameter ein @true@ übergeben, wird der API-Call und der zugehörige Callback automatisch wiederholt:

<pre><code>laut.fm.station(NAME).current_song(CALLBACK_OR_OPTIONS, true)</code></pre>

* "Demo":http://lautde.github.com/lautfm_js_tools/station.current_song_auto.html ("API URL":http://api.laut.fm/station/maxeinsdreissig/current_song)

Wechselt man zum Beispiel die current_song-Anzeige zwischen mehreren Stationen, kann man das Autoupdate wieder canceln:

<pre><code>var watchedStation = laut.fm.station(NAME1).current_song(CALLBACK_OR_OPTIONS, true);
  // ...
watchedStation.unwatch();
var watchedStation = laut.fm.station(NAME2).current_song(CALLBACK_OR_OPTIONS, true);
</code></pre>


h3. Die API-Suche

TODO: Doku

* laut.fm.search.stations(QUERY)

h2. Release History

* 2019-02-27 0.10.0 removed player (incl. flowplayer) and JSON polyfill
* 2017-01-27 0.9.1 https support all over.
* 2012-10-23 0.8.0 next_arists support. in production on the official laut.fm website.
* 2012-03-26 0.7.0 added auto updates
* 2012-03-26 0.6.0 all listeners bug fix
* 2011-11-23 0.3.0 added experimental templating support. in production on the laut.de website.
* 2011-11-21 0.2.0 first official release

